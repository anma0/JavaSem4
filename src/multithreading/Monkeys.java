package multithreading;

public class Monkeys {

    //принцип: стараться обходиться без статических методов
    public static void main(String[] args) {
        new Monkeys(); //создаём одну программу про обезьянок
    }
    private int bananas = 1_000_000;
    private int total = 0;
    private Monkeys() {
        //здесь основная логика программы



        //Если нужно, чтобы программа одновременно выполняла несколько действий, создаются потоки, по одному на каждое действие.
        //Нам нужно, чтобы 2 обезянки ели бананы одновременно, поэтому создадим два потока, далее 10

        Object monitor = new Object();

        //Runnable - произвольный код, у него нет аргументов, не возвращает результат
        Runnable monkeyAction = () -> {
            int eaten = 0;

            while (bananas > 0) {
                //внутри синхронайзд указывается любой объект. Он называется монитор.
                //если один поток взял монитор (т.е. вошёл в блок), то другие потоки ждут, когда монитор будет возвращён.
                //В данном случае можно написать this - это объект Monkeys, или можно создать специальный объект, который нужен как монитор
                synchronized (monitor) {
                    if (bananas > 0) {//повторная проверка не съели ли уже банан
                        bananas--; //1)узнать значения bananas 2)уменьшить 3)записать обратно
                        eaten++;
                    }
                }
            }
            //используем глобальную переменную, необходима синхронизация
            synchronized (monitor) {
                total += eaten;
            }
            //%d - подставить число в десятичной системе счисления
            System.out.println(String.format("A monkey ate %,d bananas; total %,d", eaten, total));
        };

        for (int i = 0; i < 10; i++) {
            Thread monkey = new Thread(monkeyAction);
            monkey.start();
        }


        //если не синхронизировать работу двх обезьян, то в начале каждая решит, что бананов 1_000_000, каждая уменьшит до 999_999 и запишет это число в переменную (поле) bananas. Т.е. бананов 999_999, но каждая обезьяна считает, что съела один банан.
        //участки кода, которые нельзя выполнять одновременно нескольким потокам, надо синхронизировать, т.е. явно указывать, что только один поток может выполнить участок кода. Для этого есть ключевое слово synchronize. программирование с помощью synchronize чень сложно, особенно если программа большая и потоков много. Это самый низкоуровневый метод программирования.


    }
}
